import React, { useState } from "react";
import { useLocation } from "react-router-dom";
import useOrderStore from "../store/useOrderStore";
import useCartStore from "../store/useCartStore";

const CheckoutForm = () => {
  const location = useLocation();
  const { product } = location.state || {}; // N·∫øu checkout 1 s·∫£n ph·∫©m
  const { cart, fetchCart ,clearCart} = useCartStore();
  const { createOrder, loading } = useOrderStore();

  // N·∫øu c√≥ product ‚Üí checkout 1 sp, ng∆∞·ª£c l·∫°i l·∫•y cart
  const items = product ? [product] : cart;

  const [address, setAddress] = useState("");
  const [phone, setPhone] = useState("");
  const [paymentMethod, setPaymentMethod] = useState("momo");

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!items || items.length === 0) {
      alert("Kh√¥ng c√≥ s·∫£n ph·∫©m ƒë·ªÉ ƒë·∫∑t h√†ng!");
      return;
    }

    if (!address || !phone) {
      alert("Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ v√† s·ªë ƒëi·ªán tho·∫°i");
      return;
    }

    let result;
    if (product) {
      // üëâ N·∫øu mua ngay 1 s·∫£n ph·∫©m
      result = await createOrder({
        productId: product.productId?._id || product.productId, // ID s·∫£n ph·∫©m
        quantity: product.quantity,
        size: product.size,
        address,
        phone,
        paymentMethod,
      });
    } else {
      // üëâ N·∫øu checkout c·∫£ gi·ªè h√†ng
      result = await createOrder({
        address,
        phone,
        paymentMethod,
      });
    }

    if (paymentMethod === "cod" && result) {
      alert("ƒê·∫∑t h√†ng th√†nh c√¥ng!");
      if (!product) fetchCart(); // clear gi·ªè h√†ng n·∫øu checkout gi·ªè
    }
     if (paymentMethod === "momo" && result?.payUrl) {
      if (!product) clearCart(); // ‚úÖ clear t·∫°m UI gi·ªè h√†ng ngay (ch·ªâ khi checkout gi·ªè h√†ng)
      window.location.href = result.payUrl; // chuy·ªÉn h∆∞·ªõng sang c·ªïng MoMo
    }
  };

  // T√≠nh t·ªïng ti·ªÅn
  const subtotal = items.reduce(
    (acc, item) => acc + item.quantity * (item.productId?.price || 0),
    0
  );
  const shippingFee = 5;
  const total = subtotal + shippingFee;

  return (
    <div className="max-w-lg mx-auto p-6 bg-white shadow-lg rounded-xl mt-10">
      <h2 className="text-2xl font-semibold text-gray-800 mb-6 text-center">
        Thanh to√°n ƒë∆°n h√†ng
      </h2>

      {/* Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m ƒë∆∞·ª£c ƒë·∫∑t */}
      <div className="mb-6 border rounded-lg p-4 bg-gray-50">
        <h3 className="text-lg font-medium mb-3">S·∫£n ph·∫©m c·ªßa b·∫°n:</h3>
        {items.map((item, idx) => (
          <div key={idx} className="flex items-center justify-between py-2 border-b text-sm">
            <div>
              <p className="font-medium">{item.productId?.name}</p>
              {item.size && <p className="text-gray-500">Size: {item.size}</p>}
              <p className="text-gray-600">SL: {item.quantity}</p>
            </div>
            <p className="font-semibold">${item.productId?.price}</p>
          </div>
        ))}

        {/* T·ªïng ti·ªÅn */}
        <div className="mt-3 text-sm">
          <div className="flex justify-between">
            <span>T·∫°m t√≠nh:</span>
            <span>${subtotal}</span>
          </div>
          <div className="flex justify-between">
            <span>Ph√≠ ship:</span>
            <span>${shippingFee}</span>
          </div>
          <div className="flex justify-between font-semibold text-gray-800">
            <span>T·ªïng c·ªông:</span>
            <span>${total}</span>
          </div>
        </div>
      </div>

      {/* Form nh·∫≠p th√¥ng tin */}
      <form onSubmit={handleSubmit} className="space-y-5">
        <div>
          <label className="block text-gray-700 font-medium mb-2">ƒê·ªãa ch·ªâ</label>
          <input
            type="text"
            value={address}
            onChange={(e) => setAddress(e.target.value)}
            placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ nh·∫≠n h√†ng"
            className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-400"
            required
          />
        </div>

        <div>
          <label className="block text-gray-700 font-medium mb-2">S·ªë ƒëi·ªán tho·∫°i</label>
          <input
            type="text"
            value={phone}
            onChange={(e) => setPhone(e.target.value)}
            placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
            className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-400"
            required
          />
        </div>

        <div>
          <label className="block text-gray-700 font-medium mb-2">Ph∆∞∆°ng th·ª©c thanh to√°n</label>
          <select
            value={paymentMethod}
            onChange={(e) => setPaymentMethod(e.target.value)}
            className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-400"
          >
            <option value="momo">MoMo</option>
            <option value="cod">Thanh to√°n khi nh·∫≠n h√†ng (COD)</option>
          </select>
        </div>

        <div className="text-center">
          <button
            type="submit"
            disabled={loading}
            className={`w-full py-3 rounded-lg text-white font-medium transition ${
              loading ? "bg-gray-400 cursor-not-allowed" : "bg-blue-500 hover:bg-blue-600"
            }`}
          >
            {loading ? "ƒêang x·ª≠ l√Ω..." : "ƒê·∫∑t h√†ng"}
          </button>
        </div>
      </form>
    </div>
  );
};

export default CheckoutForm;
